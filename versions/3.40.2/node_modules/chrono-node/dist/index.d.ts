import { DebugHandler, DebugConsume } from "./debugging";
export { Chrono } from './chrono';
export declare const strict: import("./chrono").Chrono;
export declare const casual: import("./chrono").Chrono;
export declare function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[];
export declare function parseDate(text: string, ref?: Date, option?: ParsingOption): Date;
export interface ParsingOption {
    forwardDate?: boolean;
    debug?: DebugHandler | DebugConsume;
    timezones?: {
        string: number;
    };
}
export interface ParsedResult {
    readonly refDate: Date;
    readonly index: number;
    readonly text: string;
    readonly start: ParsedComponents;
    readonly end?: ParsedComponents;
    readonly date: () => Date;
}
export interface ParsedComponents {
    readonly isCertain: (c: Component) => boolean;
    readonly get: (c: Component) => number | undefined;
    readonly date: () => Date;
}
export declare type Component = 'year' | 'month' | 'day' | 'weekday' | 'hour' | 'minute' | 'second' | 'millisecond' | 'meridiem' | 'timezoneOffset';
export declare enum Meridiem {
    AM = 0,
    PM = 1
}
export * as en from './locales/en';
export * as ja from './locales/ja';
