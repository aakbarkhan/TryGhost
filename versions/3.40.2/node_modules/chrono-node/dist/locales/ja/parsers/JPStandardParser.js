"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var yearCalculation_1 = require("../../../calculation/yearCalculation");
var dayjs_1 = __importDefault(require("dayjs"));
var PATTERN = /(?:(?:([同今本])|((昭和|平成|令和)?([0-9０-９]{1,4}|元)))年\s*)?([0-9０-９]{1,2})月\s*([0-9０-９]{1,2})日/i;
var SPECIAL_YEAR_GROUP = 1;
var TYPICAL_YEAR_GROUP = 2;
var ERA_GROUP = 3;
var YEAR_NUMBER_GROUP = 4;
var MONTH_GROUP = 5;
var DAY_GROUP = 6;
var JPStandardParser = (function () {
    function JPStandardParser() {
    }
    JPStandardParser.prototype.pattern = function () {
        return PATTERN;
    };
    JPStandardParser.prototype.extract = function (context, match) {
        var month = parseInt(constants_1.toHankaku(match[MONTH_GROUP]));
        var day = parseInt(constants_1.toHankaku(match[DAY_GROUP]));
        var components = context.createParsingComponents({
            'day': day, 'month': month
        });
        if (match[SPECIAL_YEAR_GROUP] && match[SPECIAL_YEAR_GROUP].match('同|今|本')) {
            var moment = dayjs_1.default(context.refDate);
            components.assign('year', moment.year());
        }
        if (match[TYPICAL_YEAR_GROUP]) {
            var yearNumText = match[YEAR_NUMBER_GROUP];
            var year = (yearNumText == '元') ? 1 : parseInt(constants_1.toHankaku(yearNumText));
            if (match[ERA_GROUP] == '令和') {
                year += 2018;
            }
            else if (match[ERA_GROUP] == '平成') {
                year += 1988;
            }
            else if (match[ERA_GROUP] == '昭和') {
                year += 1925;
            }
            components.assign('year', year);
        }
        else {
            var year = yearCalculation_1.findYearClosestToRef(context.refDate, day, month);
            components.imply('year', year);
        }
        return components;
    };
    return JPStandardParser;
}());
exports.default = JPStandardParser;
