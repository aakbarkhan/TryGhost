"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var yearCalculation_1 = require("../../../calculation/yearCalculation");
var constants_1 = require("../constants");
var constants_2 = require("../constants");
var constants_3 = require("../constants");
var pattern_1 = require("../../../utils/pattern");
var AbstractParserWithWordBoundary_1 = require("../../../common/parsers/AbstractParserWithWordBoundary");
var PATTERN = new RegExp('(?:' +
    '(?:on\\s*?)?' +
    ("(" + pattern_1.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY) + ")") +
    '\\s*,?\\s*)?' +
    ("(" + pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY) + ")") +
    '(?:-|/|\\s*,?\\s*)' +
    ("(" + constants_2.ORDINAL_NUMBER_PATTERN + ")(?!\\s*(?:am|pm))\\s*") +
    '(?:' +
    '(?:to|\\-)\\s*' +
    ("(" + constants_2.ORDINAL_NUMBER_PATTERN + ")\\s*") +
    ')?' +
    '(?:' +
    '(?:-|/|\\s*,?\\s*)' +
    ("(" + constants_3.YEAR_PATTERN + ")") +
    ')?' +
    '(?=\\W|$)(?!\\:\\d)', 'i');
var WEEKDAY_GROUP = 1;
var MONTH_NAME_GROUP = 2;
var DATE_GROUP = 3;
var DATE_TO_GROUP = 4;
var YEAR_GROUP = 5;
var ENMonthNameMiddleEndianParser = (function (_super) {
    __extends(ENMonthNameMiddleEndianParser, _super);
    function ENMonthNameMiddleEndianParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ENMonthNameMiddleEndianParser.prototype.innerPattern = function () {
        return PATTERN;
    };
    ENMonthNameMiddleEndianParser.prototype.innerExtract = function (context, match) {
        var month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        var day = constants_2.parseOrdinalNumberPattern(match[DATE_GROUP]);
        if (day > 31) {
            return null;
        }
        var components = context.createParsingComponents({
            'day': day, 'month': month
        });
        if (match[YEAR_GROUP]) {
            var year = constants_3.parseYear(match[YEAR_GROUP]);
            components.assign('year', year);
        }
        else {
            var year = yearCalculation_1.findYearClosestToRef(context.refDate, day, month);
            components.imply('year', year);
        }
        if (match[WEEKDAY_GROUP]) {
            var weekday = constants_1.WEEKDAY_DICTIONARY[match[WEEKDAY_GROUP].toLowerCase()];
            components.assign('weekday', weekday);
        }
        if (!match[DATE_TO_GROUP]) {
            return components;
        }
        var endDate = constants_2.parseOrdinalNumberPattern(match[DATE_TO_GROUP]);
        var result = context.createParsingResult(match.index, match[0]);
        result.start = components;
        result.end = components.clone();
        result.end.assign('day', endDate);
        return result;
    };
    return ENMonthNameMiddleEndianParser;
}(AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking));
exports.default = ENMonthNameMiddleEndianParser;
