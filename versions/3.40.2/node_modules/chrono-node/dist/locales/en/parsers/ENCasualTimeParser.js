"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../../index");
var AbstractParserWithWordBoundary_1 = require("../../../common/parsers/AbstractParserWithWordBoundary");
var ENCasualTimeParser = (function (_super) {
    __extends(ENCasualTimeParser, _super);
    function ENCasualTimeParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ENCasualTimeParser.prototype.innerPattern = function () { return /(?:this)?\s*(morning|afternoon|evening|night|noon)(?=\W|$)/i; };
    ENCasualTimeParser.prototype.innerExtract = function (context, match) {
        var component = context.createParsingComponents();
        switch (match[1].toLowerCase()) {
            case 'afternoon':
                component.imply('meridiem', index_1.Meridiem.PM);
                component.imply('hour', 15);
                break;
            case 'evening':
            case 'night':
                component.imply('meridiem', index_1.Meridiem.PM);
                component.imply('hour', 20);
                break;
            case 'morning':
                component.imply('meridiem', index_1.Meridiem.AM);
                component.imply('hour', 6);
                break;
            case 'noon':
                component.imply('meridiem', index_1.Meridiem.AM);
                component.imply('hour', 12);
                break;
        }
        return component;
    };
    return ENCasualTimeParser;
}(AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking));
exports.default = ENCasualTimeParser;
