"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dayjs_1 = __importDefault(require("dayjs"));
var index_1 = require("../../../index");
var FIRST_REG_PATTERN = new RegExp("(^|\\s|T)" +
    "(?:(?:at|from)\\s*)??" +
    "(\\d{1,4}|noon|midnight)" +
    "(?:" +
    "(?:\\.|\\:|\\：)(\\d{1,2})" +
    "(?:" +
    "(?:\\:|\\：)(\\d{2})(?:\\.(\\d{1,6}))?" +
    ")?" +
    ")?" +
    "(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?|o\\W*clock))?" +
    "(?=\\W|$)", 'i');
var SECOND_REG_PATTERN = new RegExp("^\\s*" +
    "(\\-|\\–|\\~|\\〜|to|\\?)\\s*" +
    "(\\d{1,4})" +
    "(?:" +
    "(?:\\.|\\:|\\：)(\\d{1,2})" +
    "(?:" +
    "(?:\\.|\\:|\\：)(\\d{1,2})(?:\\.(\\d{1,6}))?" +
    ")?" +
    ")?" +
    "(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?|o\\W*clock|at night))?" +
    "(?=\\W|$)", 'i');
var HOUR_GROUP = 2;
var MINUTE_GROUP = 3;
var SECOND_GROUP = 4;
var MILLI_SECOND_GROUP = 5;
var AM_PM_HOUR_GROUP = 6;
var ENTimeExpressionParser = (function () {
    function ENTimeExpressionParser() {
    }
    ENTimeExpressionParser.prototype.pattern = function () {
        return FIRST_REG_PATTERN;
    };
    ENTimeExpressionParser.prototype.extract = function (context, match) {
        var refDate = dayjs_1.default(context.refDate);
        var result = context.createParsingResult(match.index + match[1].length, match[0].substring(match[1].length));
        if (result.text.match(/^\d$/)) {
            return null;
        }
        result.start.imply('day', refDate.date());
        result.start.imply('month', refDate.month() + 1);
        result.start.imply('year', refDate.year());
        result = ENTimeExpressionParser.extractStartTimeComponent(result.clone(), match);
        if (!result) {
            return null;
        }
        var remainingText = context.text.substring(match.index + match[0].length);
        match = SECOND_REG_PATTERN.exec(remainingText);
        if (!match) {
            return result;
        }
        if (match[0].match(/^\s*([+-])\s*\d{3,4}$/)) {
            return result;
        }
        var newResult = ENTimeExpressionParser.extractEndTimeComponent(result.clone(), match);
        return newResult ? newResult : result;
    };
    ENTimeExpressionParser.extractStartTimeComponent = function (result, match) {
        var hour = 0;
        var minute = 0;
        var meridiem = null;
        if (match[HOUR_GROUP].toLowerCase() == "noon") {
            meridiem = index_1.Meridiem.PM;
            hour = 12;
        }
        else if (match[HOUR_GROUP].toLowerCase() == "midnight") {
            meridiem = index_1.Meridiem.AM;
            hour = 0;
        }
        else {
            hour = parseInt(match[HOUR_GROUP]);
        }
        if (match[MINUTE_GROUP] != null) {
            minute = parseInt(match[MINUTE_GROUP]);
        }
        else if (hour > 100) {
            minute = hour % 100;
            hour = Math.floor(hour / 100);
        }
        if (minute >= 60 || hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = index_1.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
            if (hour > 12)
                return null;
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = index_1.Meridiem.AM;
                if (hour == 12) {
                    hour = 0;
                }
            }
            if (ampm == "p") {
                meridiem = index_1.Meridiem.PM;
                if (hour != 12) {
                    hour += 12;
                }
            }
        }
        result.start.assign('hour', hour);
        result.start.assign('minute', minute);
        if (meridiem !== null) {
            result.start.assign('meridiem', meridiem);
        }
        else {
            if (hour < 12) {
                result.start.imply('meridiem', index_1.Meridiem.AM);
            }
            else {
                result.start.imply('meridiem', index_1.Meridiem.PM);
            }
        }
        if (match[MILLI_SECOND_GROUP] != null) {
            var millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));
            if (millisecond >= 1000)
                return null;
            result.start.assign('millisecond', millisecond);
        }
        if (match[SECOND_GROUP] != null) {
            var second = parseInt(match[SECOND_GROUP]);
            if (second >= 60)
                return null;
            result.start.assign('second', second);
        }
        return result;
    };
    ENTimeExpressionParser.extractEndTimeComponent = function (result, match) {
        result.end = result.start.clone();
        if (match[MILLI_SECOND_GROUP] != null) {
            var millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));
            if (millisecond >= 1000)
                return null;
            result.end.assign('millisecond', millisecond);
        }
        if (match[SECOND_GROUP] != null) {
            var second = parseInt(match[SECOND_GROUP]);
            if (second >= 60)
                return null;
            result.end.assign('second', second);
        }
        var hour = parseInt(match[HOUR_GROUP]);
        var minute = 0;
        var meridiem = -1;
        if (match[MINUTE_GROUP] != null) {
            minute = parseInt(match[MINUTE_GROUP]);
        }
        else if (hour > 100) {
            minute = hour % 100;
            hour = Math.floor(hour / 100);
        }
        if (minute >= 60 || hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = index_1.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
            if (hour > 12) {
                return null;
            }
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = index_1.Meridiem.AM;
                if (hour == 12) {
                    hour = 0;
                    if (!result.end.isCertain('day')) {
                        result.end.imply('day', result.end.get('day') + 1);
                    }
                }
            }
            if (ampm == "p") {
                meridiem = index_1.Meridiem.PM;
                if (hour != 12)
                    hour += 12;
            }
            if (!result.start.isCertain('meridiem')) {
                if (meridiem == index_1.Meridiem.AM) {
                    result.start.imply('meridiem', index_1.Meridiem.AM);
                    if (result.start.get('hour') == 12) {
                        result.start.assign('hour', 0);
                    }
                }
                else {
                    result.start.imply('meridiem', index_1.Meridiem.PM);
                    if (result.start.get('hour') != 12) {
                        result.start.assign('hour', result.start.get('hour') + 12);
                    }
                }
            }
        }
        result.text = result.text + match[0];
        result.end.assign('hour', hour);
        result.end.assign('minute', minute);
        if (meridiem >= 0) {
            result.end.assign('meridiem', meridiem);
        }
        else {
            var startAtPM = result.start.isCertain('meridiem') && result.start.get('meridiem') == index_1.Meridiem.PM;
            if (startAtPM && result.start.get('hour') > hour) {
                result.end.imply('meridiem', index_1.Meridiem.AM);
            }
            else if (hour > 12) {
                result.end.imply('meridiem', index_1.Meridiem.PM);
            }
        }
        if (result.end.date().getTime() < result.start.date().getTime()) {
            result.end.imply('day', result.end.get('day') + 1);
        }
        return result;
    };
    return ENTimeExpressionParser;
}());
exports.default = ENTimeExpressionParser;
