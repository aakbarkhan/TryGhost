"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var dayjs_1 = __importDefault(require("dayjs"));
var AbstractParserWithWordBoundary_1 = require("../../../common/parsers/AbstractParserWithWordBoundary");
var PATTERN = new RegExp('(this|next|last|past)\\s*' +
    ("(" + constants_1.NUMBER_PATTERN + ")?\\s*") +
    '(seconds?|min(?:ute)?s?|hours?|days?|weeks?|months?|years?)(?=\\s*)' +
    '(?=\\W|$)', 'i');
var MODIFIER_WORD_GROUP = 1;
var MULTIPLIER_WORD_GROUP = 2;
var RELATIVE_WORD_GROUP = 3;
var ENRelativeDateFormatParser = (function (_super) {
    __extends(ENRelativeDateFormatParser, _super);
    function ENRelativeDateFormatParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ENRelativeDateFormatParser.prototype.innerPattern = function () { return PATTERN; };
    ENRelativeDateFormatParser.prototype.innerExtract = function (context, match) {
        if (match[MODIFIER_WORD_GROUP].toLowerCase().match(/^this/)) {
            if (match[MULTIPLIER_WORD_GROUP]) {
                return null;
            }
            return this.extractThisReference(context, match[RELATIVE_WORD_GROUP]);
        }
        var modifier = match[MODIFIER_WORD_GROUP].toLowerCase().match(/^next/) ? 1 : -1;
        var parsedNum = match[MULTIPLIER_WORD_GROUP] ? constants_1.parseNumberPattern(match[MULTIPLIER_WORD_GROUP]) : 1;
        var unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();
        if (unitWord.match(/day|week|month|year/i)) {
            return this.extractDateReference(context, unitWord, parsedNum * modifier);
        }
        else {
            return this.extractTimeReference(context, unitWord, parsedNum * modifier);
        }
    };
    ENRelativeDateFormatParser.prototype.extractTimeReference = function (context, timeUnitWord, num) {
        var components = context.createParsingComponents();
        var date = dayjs_1.default(context.refDate);
        if (timeUnitWord.match(/hour/i)) {
            date = date.add(num, 'hour');
            components.imply('minute', date.minute());
            components.imply('second', date.second());
        }
        else if (timeUnitWord.match(/min/i)) {
            date = date.add(num, 'minute');
            components.assign('minute', date.minute());
            components.imply('second', date.second());
        }
        else if (timeUnitWord.match(/second/i)) {
            date = date.add(num, 'second');
            components.assign('second', date.second());
            components.assign('minute', date.minute());
        }
        components.assign('hour', date.hour());
        components.assign('year', date.year());
        components.assign('month', date.month() + 1);
        components.assign('day', date.date());
        return components;
    };
    ENRelativeDateFormatParser.prototype.extractDateReference = function (context, dateUnitWord, num) {
        var components = context.createParsingComponents();
        var date = dayjs_1.default(context.refDate);
        if (dateUnitWord.match(/day/i)) {
            date = date.add(num, 'd');
            components.assign('year', date.year());
            components.assign('month', date.month() + 1);
            components.assign('day', date.date());
        }
        else if (dateUnitWord.match(/week/i)) {
            date = date.add(num * 7, 'd');
            components.imply('day', date.date());
            components.imply('month', date.month() + 1);
            components.imply('year', date.year());
        }
        else if (dateUnitWord.match(/month/i)) {
            date = date.add(num, 'month');
            components.imply('day', date.date());
            components.assign('year', date.year());
            components.assign('month', date.month() + 1);
        }
        else if (dateUnitWord.match(/year/i)) {
            date = date.add(num, 'year');
            components.imply('day', date.date());
            components.imply('month', date.month() + 1);
            components.assign('year', date.year());
        }
        return components;
    };
    ENRelativeDateFormatParser.prototype.extractThisReference = function (context, relativeWord) {
        var components = context.createParsingComponents();
        var date = dayjs_1.default(context.refDate);
        if (relativeWord.match(/week/i)) {
            date = date.add(-date.get('d'), 'd');
            components.imply('day', date.date());
            components.imply('month', date.month() + 1);
            components.imply('year', date.year());
        }
        else if (relativeWord.match(/month/i)) {
            date = date.add(-date.date() + 1, 'd');
            components.imply('day', date.date());
            components.assign('year', date.year());
            components.assign('month', date.month() + 1);
        }
        else if (relativeWord.match(/year/i)) {
            date = date.add(-date.date() + 1, 'd');
            date = date.add(-date.month(), 'month');
            components.imply('day', date.date());
            components.imply('month', date.month() + 1);
            components.assign('year', date.year());
        }
        return components;
    };
    return ENRelativeDateFormatParser;
}(AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking));
exports.default = ENRelativeDateFormatParser;
