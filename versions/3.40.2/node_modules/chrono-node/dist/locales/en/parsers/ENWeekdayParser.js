"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var dayjs_1 = __importDefault(require("dayjs"));
var pattern_1 = require("../../../utils/pattern");
var AbstractParserWithWordBoundary_1 = require("../../../common/parsers/AbstractParserWithWordBoundary");
var PATTERN = new RegExp('(?:(?:\\,|\\(|\\（)\\s*)?' +
    '(?:on\\s*?)?' +
    '(?:(this|last|past|next)\\s*)?' +
    ("(" + pattern_1.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY) + ")") +
    '(?:\\s*(?:\\,|\\)|\\）))?' +
    '(?:\\s*(this|last|past|next)\\s*week)?' +
    '(?=\\W|$)', 'i');
var PREFIX_GROUP = 1;
var WEEKDAY_GROUP = 2;
var POSTFIX_GROUP = 3;
var ENWeekdayParser = (function (_super) {
    __extends(ENWeekdayParser, _super);
    function ENWeekdayParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ENWeekdayParser.prototype.innerPattern = function () {
        return PATTERN;
    };
    ENWeekdayParser.prototype.innerExtract = function (context, match) {
        var dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        var offset = constants_1.WEEKDAY_DICTIONARY[dayOfWeek];
        if (offset === undefined) {
            return null;
        }
        var prefix = match[PREFIX_GROUP];
        var postfix = match[POSTFIX_GROUP];
        var modifier = prefix || postfix;
        modifier = modifier || '';
        modifier = modifier.toLowerCase();
        var date = this.extractWeekday(context.refDate, offset, modifier);
        return context.createParsingComponents()
            .assign('weekday', offset)
            .imply('day', date.date())
            .imply('month', date.month() + 1)
            .imply('year', date.year());
    };
    ENWeekdayParser.prototype.extractWeekday = function (refDate, offset, modifier) {
        var date = dayjs_1.default(refDate);
        var refOffset = date.day();
        if (modifier == 'last' || modifier == 'past') {
            date = date.day(offset - 7);
        }
        else if (modifier == 'next') {
            date = date.day(offset + 7);
        }
        else if (modifier == 'this') {
            date = date.day(offset);
        }
        else {
            if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
                date = date.day(offset - 7);
            }
            else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
                date = date.day(offset + 7);
            }
            else {
                date = date.day(offset);
            }
        }
        return date;
    };
    return ENWeekdayParser;
}(AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking));
exports.default = ENWeekdayParser;
