"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dayjs_1 = __importDefault(require("dayjs"));
var index_1 = require("../../../index");
var AbstractParserWithWordBoundary_1 = require("../../../common/parsers/AbstractParserWithWordBoundary");
var ENCasualDateParser = (function (_super) {
    __extends(ENCasualDateParser, _super);
    function ENCasualDateParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ENCasualDateParser.prototype.innerPattern = function (context) {
        return /(now|today|tonight|last\s*night|tomorrow|tmr|yesterday)(?=\W|$)/i;
    };
    ENCasualDateParser.prototype.innerExtract = function (context, match) {
        var targetDate = dayjs_1.default(context.refDate);
        var lowerText = match[0].toLowerCase();
        var component = context.createParsingComponents();
        if (lowerText == 'tonight') {
            component.imply('hour', 22);
            component.imply('meridiem', index_1.Meridiem.PM);
        }
        else if (/^tomorrow|^tmr/.test(lowerText)) {
            if (targetDate.hour() > 1) {
                targetDate = targetDate.add(1, 'day');
            }
        }
        else if (/^yesterday/.test(lowerText)) {
            targetDate = targetDate.add(-1, 'day');
        }
        else if (lowerText.match(/last\s*night/)) {
            component.imply('hour', 0);
            if (targetDate.hour() > 6) {
                targetDate = targetDate.add(-1, 'day');
            }
        }
        else if (lowerText.match("now")) {
            component.assign('hour', targetDate.hour());
            component.assign('minute', targetDate.minute());
            component.assign('second', targetDate.second());
            component.assign('millisecond', targetDate.millisecond());
        }
        component.assign('day', targetDate.date());
        component.assign('month', targetDate.month() + 1);
        component.assign('year', targetDate.year());
        return component;
    };
    return ENCasualDateParser;
}(AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking));
exports.default = ENCasualDateParser;
