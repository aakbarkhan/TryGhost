"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var results_1 = require("../../../results");
var AbstractParserWithWordBoundary_1 = require("../../../common/parsers/AbstractParserWithWordBoundary");
var PATTERN = new RegExp('' +
    '(' + constants_1.TIME_UNITS_PATTERN + ')' +
    '(later|after|from now|henceforth|forward|out)' +
    '(?=(?:\\W|$))', 'i');
var STRICT_PATTERN = new RegExp('' +
    '(' + constants_1.TIME_UNITS_PATTERN + ')' +
    '(later|from now)' +
    '(?=(?:\\W|$))', 'i');
var GROUP_NUM_SUFFIX = 2;
var GROUP_NUM_TIMEUNITS = 1;
var ENTimeUnitLaterFormatParser = (function (_super) {
    __extends(ENTimeUnitLaterFormatParser, _super);
    function ENTimeUnitLaterFormatParser(strictMode) {
        var _this = _super.call(this) || this;
        _this.strictMode = strictMode;
        return _this;
    }
    ENTimeUnitLaterFormatParser.prototype.innerPattern = function () { return this.strictMode ? STRICT_PATTERN : PATTERN; };
    ENTimeUnitLaterFormatParser.prototype.innerExtract = function (context, match) {
        var suffix = match[GROUP_NUM_SUFFIX].toLowerCase().trim();
        if (!suffix) {
            return null;
        }
        var fragments = constants_1.parseTimeUnits(match[GROUP_NUM_TIMEUNITS]);
        return results_1.ParsingComponents.createRelativeFromRefDate(context.refDate, fragments);
    };
    return ENTimeUnitLaterFormatParser;
}(AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking));
exports.default = ENTimeUnitLaterFormatParser;
