"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dayjs_1 = __importDefault(require("dayjs"));
var constants_1 = require("../constants");
var yearCalculation_1 = require("../../../calculation/yearCalculation");
var PATTERN = new RegExp('(\\W|^)' +
    '(?:' +
    '(?:on\\s*?)?' +
    '((?:sun|mon|tues?|wed(?:nes)?|thu(?:rs?)?|fri|sat(?:ur)?)(?:day)?)' +
    '\\s*\\,?\\s*' +
    ')?' +
    '([0-3]{0,1}[0-9]{1})[\\/\\.\\-]([0-3]{0,1}[0-9]{1})' +
    '(?:' +
    '[\\/\\.\\-]' +
    '([0-9]{4}\\s*\\,?\\s*|[0-9]{2}\\s*\\,?\\s*)' +
    ')?' +
    '(\\W|$)', 'i');
var DAYS_OFFSET = { 'sunday': 0, 'sun': 0, 'monday': 1, 'mon': 1, 'tuesday': 2, 'wednesday': 3, 'wed': 3,
    'thursday': 4, 'thur': 4, 'friday': 5, 'fri': 5, 'saturday': 6, 'sat': 6, };
var OPENING_GROUP = 1;
var ENDING_GROUP = 6;
var WEEKDAY_GROUP = 2;
var FIRST_NUMBERS_GROUP = 3;
var SECOND_NUMBERS_GROUP = 4;
var YEAR_GROUP = 5;
var ENSlashDateFormatParser = (function () {
    function ENSlashDateFormatParser(littleEndian) {
        this.groupNumberMonth = littleEndian ? SECOND_NUMBERS_GROUP : FIRST_NUMBERS_GROUP;
        this.groupNumberDay = littleEndian ? FIRST_NUMBERS_GROUP : SECOND_NUMBERS_GROUP;
    }
    ENSlashDateFormatParser.prototype.pattern = function () {
        return PATTERN;
    };
    ENSlashDateFormatParser.prototype.extract = function (context, match) {
        var _a;
        if (match[OPENING_GROUP] == '/' || match[ENDING_GROUP] == '/') {
            match.index += match[0].length;
            return;
        }
        var index = match.index + match[OPENING_GROUP].length;
        var text = match[0].substr(match[OPENING_GROUP].length, match[0].length - match[ENDING_GROUP].length);
        if (text.match(/^\d\.\d$/) || text.match(/^\d\.\d{1,2}\.\d{1,2}\s*$/)) {
            return;
        }
        if (!match[YEAR_GROUP] && match[0].indexOf('/') < 0) {
            return;
        }
        var result = context.createParsingResult(index, text);
        var month = parseInt(match[this.groupNumberMonth]);
        var day = parseInt(match[this.groupNumberDay]);
        if (month < 1 || month > 12) {
            if (month > 12) {
                if (day >= 1 && day <= 12 && month <= 31) {
                    _a = __read([month, day], 2), day = _a[0], month = _a[1];
                }
                else {
                    return null;
                }
            }
        }
        if (day < 1 || day > 31) {
            return null;
        }
        result.start.assign('day', day);
        result.start.assign('month', month);
        if (match[YEAR_GROUP]) {
            var year = constants_1.parseYear(match[YEAR_GROUP]) || dayjs_1.default(context.refDate).year();
            result.start.assign('year', year);
        }
        else {
            var year = yearCalculation_1.findYearClosestToRef(context.refDate, day, month);
            result.start.imply('year', year);
        }
        if (match[WEEKDAY_GROUP]) {
            result.start.assign('weekday', DAYS_OFFSET[match[WEEKDAY_GROUP].toLowerCase()]);
        }
        return result;
    };
    return ENSlashDateFormatParser;
}());
exports.default = ENSlashDateFormatParser;
