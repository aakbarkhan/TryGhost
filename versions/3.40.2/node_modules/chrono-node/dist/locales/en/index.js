"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.GB = exports.strict = exports.casual = void 0;
var ENTimeUnitDeadlineFormatParser_1 = __importDefault(require("./parsers/ENTimeUnitDeadlineFormatParser"));
var ENMonthNameLittleEndianParser_1 = __importDefault(require("./parsers/ENMonthNameLittleEndianParser"));
var ENMonthNameMiddleEndianParser_1 = __importDefault(require("./parsers/ENMonthNameMiddleEndianParser"));
var ENMonthNameParser_1 = __importDefault(require("./parsers/ENMonthNameParser"));
var ENSlashDateFormatParser_1 = __importDefault(require("./parsers/ENSlashDateFormatParser"));
var ENSlashDateFormatStartWithYearParser_1 = __importDefault(require("./parsers/ENSlashDateFormatStartWithYearParser"));
var ENSlashMonthFormatParser_1 = __importDefault(require("./parsers/ENSlashMonthFormatParser"));
var ENTimeExpressionParser_1 = __importDefault(require("./parsers/ENTimeExpressionParser"));
var ENTimeUnitAgoFormatParser_1 = __importDefault(require("./parsers/ENTimeUnitAgoFormatParser"));
var ENTimeUnitLaterFormatParser_1 = __importDefault(require("./parsers/ENTimeUnitLaterFormatParser"));
var ENMergeDateRangeRefiner_1 = __importDefault(require("./refiners/ENMergeDateRangeRefiner"));
var ENMergeDateTimeRefiner_1 = __importDefault(require("./refiners/ENMergeDateTimeRefiner"));
var configurations_1 = require("../../configurations");
var ENCasualDateParser_1 = __importDefault(require("./parsers/ENCasualDateParser"));
var ENCasualTimeParser_1 = __importDefault(require("./parsers/ENCasualTimeParser"));
var ENWeekdayParser_1 = __importDefault(require("./parsers/ENWeekdayParser"));
var ENRelativeDateFormatParser_1 = __importDefault(require("./parsers/ENRelativeDateFormatParser"));
var chrono_1 = require("../../chrono");
exports.casual = new chrono_1.Chrono(createCasualConfiguration(false));
exports.strict = new chrono_1.Chrono(createConfiguration(true, false));
exports.GB = new chrono_1.Chrono(createConfiguration(false, true));
function parse(text, ref, option) {
    return exports.casual.parse(text, ref, option);
}
exports.parse = parse;
function parseDate(text, ref, option) {
    return exports.casual.parseDate(text, ref, option);
}
exports.parseDate = parseDate;
function createCasualConfiguration(littleEndian) {
    if (littleEndian === void 0) { littleEndian = false; }
    var option = createConfiguration(false, littleEndian);
    option.parsers.unshift(new ENCasualDateParser_1.default());
    option.parsers.unshift(new ENCasualTimeParser_1.default());
    option.parsers.unshift(new ENWeekdayParser_1.default());
    option.parsers.unshift(new ENMonthNameParser_1.default());
    option.parsers.unshift(new ENRelativeDateFormatParser_1.default());
    return option;
}
exports.createCasualConfiguration = createCasualConfiguration;
function createConfiguration(strictMode, littleEndian) {
    if (strictMode === void 0) { strictMode = true; }
    if (littleEndian === void 0) { littleEndian = false; }
    return configurations_1.includeCommonConfiguration({
        parsers: [
            new ENTimeUnitDeadlineFormatParser_1.default(strictMode),
            new ENMonthNameLittleEndianParser_1.default(),
            new ENMonthNameMiddleEndianParser_1.default(),
            new ENSlashDateFormatParser_1.default(littleEndian),
            new ENSlashDateFormatStartWithYearParser_1.default(),
            new ENSlashMonthFormatParser_1.default(),
            new ENTimeExpressionParser_1.default(),
            new ENTimeUnitAgoFormatParser_1.default(strictMode),
            new ENTimeUnitLaterFormatParser_1.default(strictMode),
        ],
        refiners: [
            new ENMergeDateTimeRefiner_1.default(),
            new ENMergeDateRangeRefiner_1.default()
        ]
    });
}
exports.createConfiguration = createConfiguration;
