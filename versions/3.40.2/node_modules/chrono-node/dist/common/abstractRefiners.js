"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MergingRefiner = exports.Filter = void 0;
var Filter = (function () {
    function Filter() {
    }
    Filter.prototype.refine = function (context, results) {
        var _this = this;
        return results.filter(function (r) { return _this.isValid(context, r); });
    };
    return Filter;
}());
exports.Filter = Filter;
var MergingRefiner = (function () {
    function MergingRefiner() {
    }
    MergingRefiner.prototype.refine = function (context, results) {
        var _this = this;
        if (results.length < 2) {
            return results;
        }
        var mergedResults = [];
        var curResult = results[0];
        var nextResult = null;
        var _loop_1 = function (i) {
            nextResult = results[i];
            var textBetween = context.text.substring(curResult.index + curResult.text.length, nextResult.index);
            if (!this_1.shouldMergeResults(textBetween, curResult, nextResult, context)) {
                mergedResults.push(curResult);
                curResult = nextResult;
            }
            else {
                var left_1 = curResult;
                var right_1 = nextResult;
                var mergedResult_1 = this_1.mergeResults(textBetween, left_1, right_1, context);
                context.debug(function () {
                    console.log(_this.constructor.name + " merged " + left_1 + " and " + right_1 + " into " + mergedResult_1);
                });
                curResult = mergedResult_1;
            }
        };
        var this_1 = this;
        for (var i = 1; i < results.length; i++) {
            _loop_1(i);
        }
        if (curResult != null) {
            mergedResults.push(curResult);
        }
        return mergedResults;
    };
    return MergingRefiner;
}());
exports.MergingRefiner = MergingRefiner;
