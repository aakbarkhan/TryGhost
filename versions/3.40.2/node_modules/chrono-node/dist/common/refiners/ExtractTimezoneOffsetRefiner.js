"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TIMEZONE_OFFSET_PATTERN = new RegExp("^\\s*(GMT|UTC)?([+-])(\\d{1,2}):?(\\d{2})", 'i');
var TIMEZONE_OFFSET_SIGN_GROUP = 2;
var TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 3;
var TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 4;
var ExtractTimezoneOffsetRefiner = (function () {
    function ExtractTimezoneOffsetRefiner() {
    }
    ExtractTimezoneOffsetRefiner.prototype.refine = function (context, results) {
        results.forEach(function (result) {
            if (result.start.isCertain('timezoneOffset')) {
                return;
            }
            var suffix = context.text.substring(result.index + result.text.length);
            var match = TIMEZONE_OFFSET_PATTERN.exec(suffix);
            if (!match) {
                return;
            }
            context.debug(function () {
                console.log("Extracting timezone: '" + match[0] + "' into : " + result);
            });
            var hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);
            var minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP]);
            var timezoneOffset = hourOffset * 60 + minuteOffset;
            if (match[TIMEZONE_OFFSET_SIGN_GROUP] === '-') {
                timezoneOffset = -timezoneOffset;
            }
            if (result.end != null) {
                result.end.assign('timezoneOffset', timezoneOffset);
            }
            result.start.assign('timezoneOffset', timezoneOffset);
            result.text += match[0];
        });
        return results;
    };
    return ExtractTimezoneOffsetRefiner;
}());
exports.default = ExtractTimezoneOffsetRefiner;
