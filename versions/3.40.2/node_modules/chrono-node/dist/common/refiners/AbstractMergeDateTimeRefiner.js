"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var abstractRefiners_1 = require("../abstractRefiners");
var mergingCalculation_1 = require("../../calculation/mergingCalculation");
var ENMergeDateTimeRefiner = (function (_super) {
    __extends(ENMergeDateTimeRefiner, _super);
    function ENMergeDateTimeRefiner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ENMergeDateTimeRefiner.prototype.shouldMergeResults = function (textBetween, currentResult, nextResult) {
        return ((currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime()) ||
            (nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime()))
            && textBetween.match(this.patternBetween()) != null;
    };
    ENMergeDateTimeRefiner.prototype.mergeResults = function (textBetween, currentResult, nextResult) {
        var result = currentResult.start.isOnlyDate() ?
            mergingCalculation_1.mergeDateTimeResult(currentResult, nextResult) :
            mergingCalculation_1.mergeDateTimeResult(nextResult, currentResult);
        result.index = currentResult.index;
        result.text = currentResult.text + textBetween + nextResult.text;
        return result;
    };
    return ENMergeDateTimeRefiner;
}(abstractRefiners_1.MergingRefiner));
exports.default = ENMergeDateTimeRefiner;
