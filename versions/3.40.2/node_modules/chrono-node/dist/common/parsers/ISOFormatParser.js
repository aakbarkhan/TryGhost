"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractParserWithWordBoundary_1 = require("./AbstractParserWithWordBoundary");
var PATTERN = new RegExp('([0-9]{4})\\-([0-9]{1,2})\\-([0-9]{1,2})'
    + '(?:T'
    + '([0-9]{1,2}):([0-9]{1,2})'
    + '(?::([0-9]{1,2})(?:\\.(\\d{1,4}))?)?'
    + '(?:Z|([+-]\\d{2}):?(\\d{2})?)?'
    + ')?'
    + '(?=\\W|$)', 'i');
var YEAR_NUMBER_GROUP = 1;
var MONTH_NUMBER_GROUP = 2;
var DATE_NUMBER_GROUP = 3;
var HOUR_NUMBER_GROUP = 4;
var MINUTE_NUMBER_GROUP = 5;
var SECOND_NUMBER_GROUP = 6;
var MILLISECOND_NUMBER_GROUP = 7;
var TZD_HOUR_OFFSET_GROUP = 8;
var TZD_MINUTE_OFFSET_GROUP = 9;
var ISOFormatParser = (function (_super) {
    __extends(ISOFormatParser, _super);
    function ISOFormatParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ISOFormatParser.prototype.innerPattern = function () {
        return PATTERN;
    };
    ISOFormatParser.prototype.innerExtract = function (context, match) {
        var components = {};
        components['year'] = parseInt(match[YEAR_NUMBER_GROUP]);
        components['month'] = parseInt(match[MONTH_NUMBER_GROUP]);
        components['day'] = parseInt(match[DATE_NUMBER_GROUP]);
        if (match[HOUR_NUMBER_GROUP] != null) {
            components['hour'] = parseInt(match[HOUR_NUMBER_GROUP]);
            components['minute'] = parseInt(match[MINUTE_NUMBER_GROUP]);
            if (match[SECOND_NUMBER_GROUP] != null) {
                components['second'] = parseInt(match[SECOND_NUMBER_GROUP]);
            }
            if (match[MILLISECOND_NUMBER_GROUP] != null) {
                components['millisecond'] = parseInt(match[MILLISECOND_NUMBER_GROUP]);
            }
            if (match[TZD_HOUR_OFFSET_GROUP] == null) {
                components['timezoneOffset'] = 0;
            }
            else {
                var hourOffset = parseInt(match[TZD_HOUR_OFFSET_GROUP]);
                var minuteOffset = 0;
                if (match[TZD_MINUTE_OFFSET_GROUP] != null) {
                    minuteOffset = parseInt(match[TZD_MINUTE_OFFSET_GROUP]);
                }
                var offset = hourOffset * 60;
                if (offset < 0) {
                    offset -= minuteOffset;
                }
                else {
                    offset += minuteOffset;
                }
                components['timezoneOffset'] = offset;
            }
        }
        return components;
    };
    return ISOFormatParser;
}(AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking));
exports.default = ISOFormatParser;
