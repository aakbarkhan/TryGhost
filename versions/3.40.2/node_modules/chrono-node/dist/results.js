"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParsingResult = exports.ParsingComponents = void 0;
var dayjs_1 = __importDefault(require("dayjs"));
var ParsingComponents = (function () {
    function ParsingComponents(refDate, knownComponents) {
        this.knownValues = {};
        this.impliedValues = {};
        if (knownComponents) {
            for (var key in knownComponents) {
                this.knownValues[key] = knownComponents[key];
            }
        }
        var refDayJs = dayjs_1.default(refDate);
        this.imply('day', refDayJs.date());
        this.imply('month', refDayJs.month() + 1);
        this.imply('year', refDayJs.year());
        this.imply('hour', 12);
        this.imply('minute', 0);
        this.imply('second', 0);
        this.imply('millisecond', 0);
    }
    ParsingComponents.prototype.get = function (component) {
        if (component in this.knownValues) {
            return this.knownValues[component];
        }
        if (component in this.impliedValues) {
            return this.impliedValues[component];
        }
        return null;
    };
    ParsingComponents.prototype.date = function () {
        return this.dayjs().toDate();
    };
    ParsingComponents.prototype.isCertain = function (component) {
        return component in this.knownValues;
    };
    ParsingComponents.prototype.getCertainComponents = function () {
        return Object.keys(this.knownValues);
    };
    ParsingComponents.prototype.imply = function (component, value) {
        if (component in this.knownValues) {
            return this;
        }
        this.impliedValues[component] = value;
        return this;
    };
    ParsingComponents.prototype.assign = function (component, value) {
        this.knownValues[component] = value;
        delete this.impliedValues[component];
        return this;
    };
    ParsingComponents.prototype.clone = function () {
        var component = new ParsingComponents(new Date());
        component.knownValues = {};
        component.impliedValues = {};
        for (var key in this.knownValues) {
            component.knownValues[key] = this.knownValues[key];
        }
        for (var key in this.impliedValues) {
            component.impliedValues[key] = this.impliedValues[key];
        }
        return component;
    };
    ParsingComponents.prototype.isOnlyDate = function () {
        return !this.isCertain('hour') && !this.isCertain('minute') && !this.isCertain('second');
    };
    ParsingComponents.prototype.isOnlyTime = function () {
        return !this.isCertain('weekday') && !this.isCertain('day') && !this.isCertain('month');
    };
    ParsingComponents.prototype.isOnlyWeekdayComponent = function () {
        return this.isCertain('weekday') && !this.isCertain('day') && !this.isCertain('month');
    };
    ParsingComponents.prototype.isOnlyDayMonthComponent = function () {
        return this.isCertain('day') && this.isCertain('month') && !this.isCertain('year');
    };
    ParsingComponents.prototype.isValidDate = function () {
        var dateMoment = this.dayjs();
        if (this.isCertain('timezoneOffset')) {
            var adjustTimezoneOffset = this.get('timezoneOffset') - dateMoment.utcOffset();
            dateMoment = dateMoment.add(adjustTimezoneOffset, 'minute');
        }
        if (dateMoment.get('year') != this.get('year'))
            return false;
        if (dateMoment.get('month') != this.get('month') - 1)
            return false;
        if (dateMoment.get('date') != this.get('day'))
            return false;
        if (this.get('hour') != null && dateMoment.get('hour') != this.get('hour'))
            return false;
        if (this.get('minute') != null && dateMoment.get('minute') != this.get('minute'))
            return false;
        return true;
    };
    ParsingComponents.prototype.dayjs = function () {
        var result = dayjs_1.default();
        result = result.year(this.get('year'));
        result = result.month(this.get('month') - 1);
        result = result.date(this.get('day'));
        result = result.hour(this.get('hour'));
        result = result.minute(this.get('minute'));
        result = result.second(this.get('second'));
        result = result.millisecond(this.get('millisecond'));
        var currentTimezoneOffset = result.utcOffset();
        var targetTimezoneOffset = this.get('timezoneOffset') !== null ?
            this.get('timezoneOffset') : currentTimezoneOffset;
        var adjustTimezoneOffset = targetTimezoneOffset - currentTimezoneOffset;
        result = result.add(-adjustTimezoneOffset, 'minute');
        return result;
    };
    ParsingComponents.prototype.toString = function () {
        return "[ParsingComponents {knownValues: " + JSON.stringify(this.knownValues) + ", impliedValues: " + JSON.stringify(this.impliedValues) + "}]";
    };
    ParsingComponents.createRelativeFromRefDate = function (refDate, fragments) {
        var date = dayjs_1.default(refDate);
        for (var key in fragments) {
            date = date.add(fragments[key], key);
        }
        var components = new ParsingComponents(refDate);
        if (fragments['hour'] || fragments['minute'] || fragments['second']) {
            components.assign('hour', date.hour());
            components.assign('minute', date.minute());
            components.assign('second', date.second());
        }
        else {
            components.imply('hour', date.hour());
            components.imply('minute', date.minute());
            components.imply('second', date.second());
        }
        if (fragments['d'] || fragments['month'] || fragments['year']) {
            components.assign('day', date.date());
            components.assign('month', date.month() + 1);
            components.assign('year', date.year());
        }
        else {
            if (fragments['week']) {
                components.imply('weekday', date.day());
            }
            components.imply('day', date.date());
            components.imply('month', date.month() + 1);
            components.imply('year', date.year());
        }
        return components;
    };
    return ParsingComponents;
}());
exports.ParsingComponents = ParsingComponents;
var ParsingResult = (function () {
    function ParsingResult(refDate, index, text, start, end) {
        this.refDate = refDate;
        this.index = index;
        this.text = text;
        this.start = start || new ParsingComponents(this.refDate);
        this.end = end;
    }
    ParsingResult.prototype.clone = function () {
        var result = new ParsingResult(this.refDate, this.index, this.text);
        result.start = this.start ? this.start.clone() : null;
        result.end = this.end ? this.end.clone() : null;
        return result;
    };
    ParsingResult.prototype.date = function () {
        return this.start.date();
    };
    ParsingResult.prototype.toString = function () {
        return "[ParsingResult {index: " + this.index + ", text: '" + this.text + "', ...}]";
    };
    return ParsingResult;
}());
exports.ParsingResult = ParsingResult;
