{"version":3,"file":"parser-plugins.js","sources":["../lib/parser-plugins.js"],"sourcesContent":["/* global DOMParser, window */\n\n/**\n * Copied from:\n * https://github.com/TryGhost/Ghost-Admin/blob/1f3d77d7230dd47a7eb5f38b90dfa510b2a16801/lib/koenig-editor/addon/options/parser-plugins.js\n * Which makes use of:\n * https://github.com/TryGhost/Ghost-Admin/blob/1f3d77d7230dd47a7eb5f38b90dfa510b2a16801/lib/koenig-editor/addon/helpers/clean-basic-html.js\n *\n * These functions are used to proces nodes during parsing from DOM -> mobiledoc\n */\n\nimport cleanBasicHtml from '@tryghost/kg-clean-basic-html';\n\nexport function createParserPlugins(_options = {}) {\n    const defaults = {};\n    const options = Object.assign({}, defaults, _options);\n\n    if (!options.createDocument) {\n        const Parser = (typeof DOMParser !== 'undefined' && DOMParser) || (typeof window !== 'undefined' && window.DOMParser);\n\n        if (!Parser) {\n            throw new Error('createParserPlugins() must be passed a `createDocument` function as an option when used in a non-browser environment');\n        }\n\n        options.createDocument = function (html) {\n            const parser = new Parser();\n            return parser.parseFromString(html, 'text/html');\n        };\n    }\n\n    // HELPERS -----------------------------------------------------------------\n\n    function _readFigCaptionFromNode(node, payload, selector = 'figcaption') {\n        let figcaptions = Array.from(node.querySelectorAll(selector));\n\n        if (figcaptions.length) {\n            figcaptions.forEach((caption) => {\n                let cleanHtml = cleanBasicHtml(caption.innerHTML, options);\n                payload.caption = payload.caption ? `${payload.caption} / ${cleanHtml}` : cleanHtml;\n                caption.remove(); // cleanup this processed element\n            });\n        }\n    }\n\n    function _readGalleryImageFromNode(node, imgNum) {\n        let fileName = node.src.match(/[^/]*$/)[0];\n        let image = {\n            fileName,\n            row: Math.floor(imgNum / 3),\n            src: node.src\n        };\n\n        if (node.width) {\n            image.width = node.width;\n        } else if (node.dataset && node.dataset.width) {\n            image.width = parseInt(node.dataset.width, 10);\n        }\n\n        if (node.height) {\n            image.height = node.height;\n        } else if (node.dataset && node.dataset.height) {\n            image.height = parseInt(node.dataset.height, 10);\n        }\n\n        if ((!node.width && !node.height) && node.getAttribute('data-image-dimensions')) {\n            const [, width, height] = (/^(\\d*)x(\\d*)$/gi).exec(node.getAttribute('data-image-dimensions'));\n            image.width = parseInt(width, 10);\n            image.height = parseInt(height, 10);\n        }\n\n        if (node.alt) {\n            image.alt = node.alt;\n        }\n\n        if (node.title) {\n            image.title = node.title;\n        }\n\n        return image;\n    }\n\n    function _createPayloadForIframe(iframe) {\n        // If we don't have a src Or it's not an absolute URL, we can't handle this\n        // This regex handles http://, https:// or //\n        if (!iframe.src || !iframe.src.match(/^(https?:)?\\/\\//i)) {\n            return;\n        }\n\n        // if it's a schemaless URL, convert to https\n        if (iframe.src.match(/^\\/\\//)) {\n            iframe.src = `https:${iframe.src}`;\n        }\n\n        let payload = {\n            url: iframe.src\n        };\n\n        payload.html = iframe.outerHTML;\n\n        return payload;\n    }\n\n    // PLUGINS -----------------------------------------------------------------\n\n    function mixtapeEmbed(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'DIV' || !node.className.match(/graf--mixtapeEmbed/)) {\n            return;\n        }\n\n        // Grab the relevant elements - Anchor wraps most of the data\n        let anchorElement = node.querySelector('.markup--mixtapeEmbed-anchor');\n        let titleElement = anchorElement.querySelector('.markup--mixtapeEmbed-strong');\n        let descElement = anchorElement.querySelector('.markup--mixtapeEmbed-em');\n        // Image is a top level field inside it's own a tag\n        let imgElement = node.querySelector('.mixtapeImage');\n\n        // Grab individual values from the elements\n        let url = anchorElement.href;\n        let title = '';\n        let description = '';\n\n        if (titleElement && titleElement.innerHTML) {\n            title = cleanBasicHtml(titleElement.innerHTML, options);\n            // Cleanup anchor so we can see what's left now that we've processed title\n            anchorElement.removeChild(titleElement);\n        }\n\n        if (descElement && descElement.innerHTML) {\n            description = cleanBasicHtml(descElement.innerHTML, options);\n            // Cleanup anchor so we can see what's left now that we've processed description\n            anchorElement.removeChild(descElement);\n        }\n\n        // // Format our preferred structure.\n        let metadata = {\n            url,\n            title,\n            description\n        };\n\n        // Publisher is the remaining text in the anchor, once title & desc are removed\n        let publisher = cleanBasicHtml(anchorElement.innerHTML, options);\n        if (publisher) {\n            metadata.publisher = publisher;\n        }\n\n        // Image is optional,\n        // The element usually still exists with an additional has.mixtapeImage--empty class and has no background image\n        if (imgElement && imgElement.style['background-image']) {\n            metadata.thumbnail = imgElement.style['background-image'].match(/url\\(([^)]*?)\\)/)[1];\n        }\n\n        let payload = {url, metadata};\n        let cardSection = builder.createCardSection('bookmark', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    // https://github.com/TryGhost/Koenig/issues/1\n    // allows arbitrary HTML blocks wrapped in our card comments to be extracted\n    // into a HTML card rather than being put through the normal parse+plugins\n    function kgHtmlCardToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 8 || node.nodeValue !== 'kg-card-begin: html') {\n            return;\n        }\n\n        let html = [];\n\n        function isHtmlEndComment(n) {\n            return n && n.nodeType === 8 && n.nodeValue === 'kg-card-end: html';\n        }\n\n        let nextNode = node.nextSibling;\n        while (nextNode && !isHtmlEndComment(nextNode)) {\n            let currentNode = nextNode;\n            html.push(currentNode.outerHTML);\n            nextNode = currentNode.nextSibling;\n            // remove nodes as we go so that they don't go through the parser\n            currentNode.remove();\n        }\n\n        let payload = {html: html.join('\\n').trim()};\n        let cardSection = builder.createCardSection('html', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    // mobiledoc by default ignores <BR> tags but we have a custom SoftReturn atom\n    function brToSoftBreakAtom(node, builder, {addMarkerable, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'BR') {\n            return;\n        }\n\n        let softReturn = builder.createAtom('soft-return');\n        addMarkerable(softReturn);\n\n        nodeFinished();\n    }\n\n    // leading newlines in text nodes will add a space to the beginning of the text\n    // which doesn't render correctly if we're replacing <br> with SoftReturn atoms\n    // after parsing text as markdown to html\n    function removeLeadingNewline(node) {\n        if (node.nodeType !== 3 || node.nodeName !== '#text') {\n            return;\n        }\n\n        node.nodeValue = node.nodeValue.replace(/^\\n/, '');\n    }\n\n    const kgGalleryCardToCard = (node, builder, {addSection, nodeFinished}) => {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        if (!node.className.match(/kg-gallery-card/)) {\n            return;\n        }\n\n        let payload = {};\n        let imgs = Array.from(node.querySelectorAll('img'));\n\n        // Process nodes into the payload\n        payload.images = imgs.map(_readGalleryImageFromNode);\n\n        _readFigCaptionFromNode(node, payload);\n\n        let cardSection = builder.createCardSection('gallery', payload);\n        addSection(cardSection);\n        nodeFinished();\n    };\n\n    function grafGalleryToCard(node, builder, {addSection, nodeFinished}) {\n        function isGrafGallery(n) {\n            return n.nodeType === 1 && n.tagName === 'DIV' && n.dataset && n.dataset.paragraphCount && n.querySelectorAll('img').length > 0;\n        }\n\n        if (!isGrafGallery(node)) {\n            return;\n        }\n\n        let payload = {};\n\n        // These galleries exist in multiple divs. Read the images and caption from the first one...\n        let imgs = Array.from(node.querySelectorAll('img'));\n        _readFigCaptionFromNode(node, payload);\n\n        // ...and then iterate over any remaining divs until we run out of matches\n        let nextNode = node.nextSibling;\n        while (nextNode && isGrafGallery(nextNode)) {\n            let currentNode = nextNode;\n            imgs = imgs.concat(Array.from(currentNode.querySelectorAll('img')));\n            _readFigCaptionFromNode(currentNode, payload);\n            nextNode = currentNode.nextSibling;\n            // remove nodes as we go so that they don't go through the parser\n            currentNode.remove();\n        }\n\n        // Process nodes into the payload\n        payload.images = imgs.map(_readGalleryImageFromNode);\n\n        let cardSection = builder.createCardSection('gallery', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function sqsGalleriesToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'DIV' || !node.className.match(/sqs-gallery-container/) || node.className.match(/summary-/)) {\n            return;\n        }\n\n        let payload = {};\n\n        // Each image exists twice...\n        // The first image is wrapped in `<noscript>`\n        // The second image contains image dimensions but the src property needs to be taken from `data-src`.\n        let imgs = Array.from(node.querySelectorAll('img.thumb-image'));\n\n        imgs = imgs.map((img) => {\n            if (!img.getAttribute('src')) {\n                if (img.previousSibling.tagName === 'NOSCRIPT' && img.previousSibling.getElementsByTagName('img').length) {\n                    const prevNode = img.previousSibling;\n                    img.setAttribute('src', img.getAttribute('data-src'));\n                    prevNode.remove();\n                } else {\n                    return;\n                }\n            }\n\n            return img;\n        });\n\n        _readFigCaptionFromNode(node, payload, '.meta-title');\n\n        // Process nodes into the payload\n        payload.images = imgs.map(_readGalleryImageFromNode);\n\n        let cardSection = builder.createCardSection('gallery', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureToImageCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let img = node.querySelector('img');\n        let kgClass = node.className.match(/kg-width-(wide|full)/);\n        let grafClass = node.className.match(/graf--layout(FillWidth|OutsetCenter)/);\n\n        if (!img) {\n            return;\n        }\n\n        let payload = {\n            src: img.src,\n            alt: img.alt,\n            title: img.title\n        };\n\n        if (kgClass) {\n            payload.cardWidth = kgClass[1];\n        } else if (grafClass) {\n            payload.cardWidth = grafClass[1] === 'FillWidth' ? 'full' : 'wide';\n        }\n\n        _readFigCaptionFromNode(node, payload);\n\n        let cardSection = builder.createCardSection('image', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function imgToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'IMG') {\n            return;\n        }\n\n        let payload = {\n            src: node.src,\n            alt: node.alt,\n            title: node.title\n        };\n\n        let cardSection = builder.createCardSection('image', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function hrToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'HR') {\n            return;\n        }\n\n        let cardSection = builder.createCardSection('hr');\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureIframeToEmbedCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let iframe = node.querySelector('iframe');\n\n        if (!iframe) {\n            return;\n        }\n\n        let payload = _createPayloadForIframe(iframe);\n\n        if (!payload) {\n            return;\n        }\n\n        _readFigCaptionFromNode(node, payload);\n\n        let cardSection = builder.createCardSection('embed', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function iframeToEmbedCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'IFRAME') {\n            return;\n        }\n\n        let payload = _createPayloadForIframe(node);\n\n        if (!payload) {\n            return;\n        }\n\n        let cardSection = builder.createCardSection('embed', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureBlockquoteToEmbedCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let blockquote = node.querySelector('blockquote');\n        let link = node.querySelector('a');\n\n        if (!blockquote || !link) {\n            return;\n        }\n\n        let url = link.href;\n\n        // If we don't have a url, or it's not an absolute URL, we can't handle this\n        if (!url || !url.match(/^https?:\\/\\//i)) {\n            return;\n        }\n\n        let payload = {\n            url: url\n        };\n\n        _readFigCaptionFromNode(node, payload);\n\n        payload.html = node.innerHTML;\n\n        let cardSection = builder.createCardSection('embed', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureToCodeCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let pre = node.querySelector('pre');\n\n        // If this figure doesn't have a pre tag in it\n        if (!pre) {\n            return;\n        }\n\n        let code = pre.querySelector('code');\n        let figcaption = node.querySelector('figcaption');\n\n        // if there's no caption the preCodeToCard plugin will pick it up instead\n        if (!code || !figcaption) {\n            return;\n        }\n\n        let payload = {\n            code: code.textContent\n        };\n\n        _readFigCaptionFromNode(node, payload);\n\n        let preClass = pre.getAttribute('class') || '';\n        let codeClass = code.getAttribute('class') || '';\n        let langRegex = /lang(?:uage)?-(.*?)(?:\\s|$)/i;\n        let languageMatches = preClass.match(langRegex) || codeClass.match(langRegex);\n        if (languageMatches) {\n            payload.language = languageMatches[1].toLowerCase();\n        }\n\n        let cardSection = builder.createCardSection('code', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function preCodeToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'PRE') {\n            return;\n        }\n\n        let [codeElement] = node.children;\n\n        if (codeElement && codeElement.tagName === 'CODE') {\n            let payload = {code: codeElement.textContent};\n\n            let preClass = node.getAttribute('class') || '';\n            let codeClass = codeElement.getAttribute('class') || '';\n            let langRegex = /lang(?:uage)?-(.*?)(?:\\s|$)/i;\n            let languageMatches = preClass.match(langRegex) || codeClass.match(langRegex);\n            if (languageMatches) {\n                payload.language = languageMatches[1].toLowerCase();\n            }\n\n            let cardSection = builder.createCardSection('code', payload);\n            addSection(cardSection);\n            nodeFinished();\n        }\n    }\n\n    function figureScriptToHtmlCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let script = node.querySelector('script');\n\n        if (!script || !script.src.match(/^https:\\/\\/gist\\.github\\.com/)) {\n            return;\n        }\n\n        let payload = {html: script.outerHTML};\n        let cardSection = builder.createCardSection('html', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function tableToHtmlCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'TABLE') {\n            return;\n        }\n\n        if (node.parentNode.tagName === 'TABLE') {\n            return;\n        }\n\n        let payload = {html: node.outerHTML};\n        let cardSection = builder.createCardSection('html', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    return [\n        mixtapeEmbed,\n        kgHtmlCardToCard,\n        brToSoftBreakAtom,\n        removeLeadingNewline,\n        kgGalleryCardToCard,\n        figureBlockquoteToEmbedCard, // I think these can contain images\n        grafGalleryToCard,\n        sqsGalleriesToCard,\n        figureToImageCard,\n        imgToCard,\n        hrToCard,\n        figureToCodeCard,\n        preCodeToCard,\n        figureIframeToEmbedCard,\n        iframeToEmbedCard, // Process iFrames without figures after ones with\n        figureScriptToHtmlCard,\n        tableToHtmlCard\n    ];\n}\n"],"names":["createParserPlugins","_options","defaults","options","Object","assign","createDocument","Parser","DOMParser","window","Error","html","parser","parseFromString","_readFigCaptionFromNode","node","payload","selector","figcaptions","Array","from","querySelectorAll","length","forEach","caption","cleanHtml","cleanBasicHtml","innerHTML","remove","_readGalleryImageFromNode","imgNum","fileName","src","match","image","row","Math","floor","width","dataset","parseInt","height","getAttribute","exec","alt","title","_createPayloadForIframe","iframe","url","outerHTML","mixtapeEmbed","builder","addSection","nodeFinished","nodeType","tagName","className","anchorElement","querySelector","titleElement","descElement","imgElement","href","description","removeChild","metadata","publisher","style","thumbnail","cardSection","createCardSection","kgHtmlCardToCard","nodeValue","isHtmlEndComment","n","nextNode","nextSibling","currentNode","push","join","trim","brToSoftBreakAtom","addMarkerable","softReturn","createAtom","removeLeadingNewline","nodeName","replace","kgGalleryCardToCard","imgs","images","map","grafGalleryToCard","isGrafGallery","paragraphCount","concat","sqsGalleriesToCard","img","previousSibling","getElementsByTagName","prevNode","setAttribute","figureToImageCard","kgClass","grafClass","cardWidth","imgToCard","hrToCard","figureIframeToEmbedCard","iframeToEmbedCard","figureBlockquoteToEmbedCard","blockquote","link","figureToCodeCard","pre","code","figcaption","textContent","preClass","codeClass","langRegex","languageMatches","language","toLowerCase","preCodeToCard","codeElement","children","figureScriptToHtmlCard","script","tableToHtmlCard","parentNode"],"mappings":"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"}