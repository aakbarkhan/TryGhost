"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var ms = require('ms');

var humanInterval = require('human-interval');

var later = require('@breejs/later');

var isSANB = require('is-string-and-not-blank');
/**
 * Naively checks if passed value is of later.js schedule format (https://breejs.github.io/later/schedules.html)
 *
 * @param {*} value to check for schedule format
 * @returns {boolean}
 */


var isSchedule = function isSchedule(value) {
  return (0, _typeof2.default)(value) === 'object' && Array.isArray(value.schedules);
};
/**
 * Extracts job name from job definition
 *
 * @param {string | Object | Function} job definition
 * @returns {string}
 */


var getName = function getName(job) {
  if (isSANB(job)) return job;
  if ((0, _typeof2.default)(job) === 'object' && isSANB(job.name)) return job.name;
  if (typeof job === 'function' && isSANB(job.name)) return job.name;
};
/**
 * Parses provided value into millisecond
 *
 * @param {string} _value
 */


var getHumanToMs = function getHumanToMs(_value) {
  var value = humanInterval(_value);
  if (Number.isNaN(value)) return ms(_value);
  return value;
};
/**
 * Parses schedule value into "later" schedule object or milliseconds
 *
 * @param {boolean | string | number | Object} value
 * @returns {number | boolean | Object}
 */


var parseValue = function parseValue(value) {
  if (value === false) return value;
  if (isSchedule(value)) return value;

  if (isSANB(value)) {
    var schedule = later.schedule(later.parse.text(value));
    if (schedule.isValid()) return later.parse.text(value);
    value = getHumanToMs(value);
  }

  if (!Number.isFinite(value) || value < 0) throw new Error("Value ".concat(value, " must be a finite number >= 0 or a String parseable by `later.parse.text` (see <https://breejs.github.io/later/parsers.html#text> for examples)"));
  return value;
};
/**
 * Processes job objects extracting their names
 * Can conditionaly skip records by their index
 *
 * @param {any[]} jobs
 * @param {number} excludeIndex
 * @returns {string[]} job names
 */


var getJobNames = function getJobNames(jobs, excludeIndex) {
  var names = [];

  var _iterator = _createForOfIteratorHelper(jobs.entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          i = _step$value[0],
          job = _step$value[1];

      if (i === excludeIndex) continue;
      var name = getName(job);
      if (name) names.push(name);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return names;
};

module.exports.isSchedule = isSchedule;
module.exports.getName = getName;
module.exports.getHumanToMs = getHumanToMs;
module.exports.parseValue = parseValue;
module.exports.getJobNames = getJobNames;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9qb2ItdXRpbHMuanMiXSwibmFtZXMiOlsibXMiLCJyZXF1aXJlIiwiaHVtYW5JbnRlcnZhbCIsImxhdGVyIiwiaXNTQU5CIiwiaXNTY2hlZHVsZSIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5Iiwic2NoZWR1bGVzIiwiZ2V0TmFtZSIsImpvYiIsIm5hbWUiLCJnZXRIdW1hblRvTXMiLCJfdmFsdWUiLCJOdW1iZXIiLCJpc05hTiIsInBhcnNlVmFsdWUiLCJzY2hlZHVsZSIsInBhcnNlIiwidGV4dCIsImlzVmFsaWQiLCJpc0Zpbml0ZSIsIkVycm9yIiwiZ2V0Sm9iTmFtZXMiLCJqb2JzIiwiZXhjbHVkZUluZGV4IiwibmFtZXMiLCJlbnRyaWVzIiwiaSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsSUFBTUMsYUFBYSxHQUFHRCxPQUFPLENBQUMsZ0JBQUQsQ0FBN0I7O0FBQ0EsSUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsZUFBRCxDQUFyQjs7QUFDQSxJQUFNRyxNQUFNLEdBQUdILE9BQU8sQ0FBQyx5QkFBRCxDQUF0QjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsSUFBTUksVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQ0MsS0FBRCxFQUFXO0FBQzVCLFNBQU8sc0JBQU9BLEtBQVAsTUFBaUIsUUFBakIsSUFBNkJDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixLQUFLLENBQUNHLFNBQXBCLENBQXBDO0FBQ0QsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsSUFBTUMsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsR0FBRCxFQUFTO0FBQ3ZCLE1BQUlQLE1BQU0sQ0FBQ08sR0FBRCxDQUFWLEVBQWlCLE9BQU9BLEdBQVA7QUFDakIsTUFBSSxzQkFBT0EsR0FBUCxNQUFlLFFBQWYsSUFBMkJQLE1BQU0sQ0FBQ08sR0FBRyxDQUFDQyxJQUFMLENBQXJDLEVBQWlELE9BQU9ELEdBQUcsQ0FBQ0MsSUFBWDtBQUNqRCxNQUFJLE9BQU9ELEdBQVAsS0FBZSxVQUFmLElBQTZCUCxNQUFNLENBQUNPLEdBQUcsQ0FBQ0MsSUFBTCxDQUF2QyxFQUFtRCxPQUFPRCxHQUFHLENBQUNDLElBQVg7QUFDcEQsQ0FKRDtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNDLE1BQUQsRUFBWTtBQUMvQixNQUFNUixLQUFLLEdBQUdKLGFBQWEsQ0FBQ1ksTUFBRCxDQUEzQjtBQUNBLE1BQUlDLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhVixLQUFiLENBQUosRUFBeUIsT0FBT04sRUFBRSxDQUFDYyxNQUFELENBQVQ7QUFDekIsU0FBT1IsS0FBUDtBQUNELENBSkQ7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLElBQU1XLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUNYLEtBQUQsRUFBVztBQUM1QixNQUFJQSxLQUFLLEtBQUssS0FBZCxFQUFxQixPQUFPQSxLQUFQO0FBRXJCLE1BQUlELFVBQVUsQ0FBQ0MsS0FBRCxDQUFkLEVBQXVCLE9BQU9BLEtBQVA7O0FBRXZCLE1BQUlGLE1BQU0sQ0FBQ0UsS0FBRCxDQUFWLEVBQW1CO0FBQ2pCLFFBQU1ZLFFBQVEsR0FBR2YsS0FBSyxDQUFDZSxRQUFOLENBQWVmLEtBQUssQ0FBQ2dCLEtBQU4sQ0FBWUMsSUFBWixDQUFpQmQsS0FBakIsQ0FBZixDQUFqQjtBQUNBLFFBQUlZLFFBQVEsQ0FBQ0csT0FBVCxFQUFKLEVBQXdCLE9BQU9sQixLQUFLLENBQUNnQixLQUFOLENBQVlDLElBQVosQ0FBaUJkLEtBQWpCLENBQVA7QUFDeEJBLElBQUFBLEtBQUssR0FBR08sWUFBWSxDQUFDUCxLQUFELENBQXBCO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDUyxNQUFNLENBQUNPLFFBQVAsQ0FBZ0JoQixLQUFoQixDQUFELElBQTJCQSxLQUFLLEdBQUcsQ0FBdkMsRUFDRSxNQUFNLElBQUlpQixLQUFKLGlCQUNLakIsS0FETCxxSkFBTjtBQUlGLFNBQU9BLEtBQVA7QUFDRCxDQWpCRDtBQW1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxJQUFNa0IsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBQ0MsSUFBRCxFQUFPQyxZQUFQLEVBQXdCO0FBQzFDLE1BQU1DLEtBQUssR0FBRyxFQUFkOztBQUQwQyw2Q0FHbkJGLElBQUksQ0FBQ0csT0FBTCxFQUhtQjtBQUFBOztBQUFBO0FBRzFDLHdEQUF1QztBQUFBO0FBQUEsVUFBM0JDLENBQTJCO0FBQUEsVUFBeEJsQixHQUF3Qjs7QUFDckMsVUFBSWtCLENBQUMsS0FBS0gsWUFBVixFQUF3QjtBQUV4QixVQUFNZCxJQUFJLEdBQUdGLE9BQU8sQ0FBQ0MsR0FBRCxDQUFwQjtBQUVBLFVBQUlDLElBQUosRUFBVWUsS0FBSyxDQUFDRyxJQUFOLENBQVdsQixJQUFYO0FBQ1g7QUFUeUM7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFXMUMsU0FBT2UsS0FBUDtBQUNELENBWkQ7O0FBY0FJLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlM0IsVUFBZixHQUE0QkEsVUFBNUI7QUFDQTBCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFldEIsT0FBZixHQUF5QkEsT0FBekI7QUFDQXFCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlbkIsWUFBZixHQUE4QkEsWUFBOUI7QUFDQWtCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlZixVQUFmLEdBQTRCQSxVQUE1QjtBQUNBYyxNQUFNLENBQUNDLE9BQVAsQ0FBZVIsV0FBZixHQUE2QkEsV0FBN0IiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtcyA9IHJlcXVpcmUoJ21zJyk7XG5jb25zdCBodW1hbkludGVydmFsID0gcmVxdWlyZSgnaHVtYW4taW50ZXJ2YWwnKTtcbmNvbnN0IGxhdGVyID0gcmVxdWlyZSgnQGJyZWVqcy9sYXRlcicpO1xuY29uc3QgaXNTQU5CID0gcmVxdWlyZSgnaXMtc3RyaW5nLWFuZC1ub3QtYmxhbmsnKTtcblxuLyoqXG4gKiBOYWl2ZWx5IGNoZWNrcyBpZiBwYXNzZWQgdmFsdWUgaXMgb2YgbGF0ZXIuanMgc2NoZWR1bGUgZm9ybWF0IChodHRwczovL2JyZWVqcy5naXRodWIuaW8vbGF0ZXIvc2NoZWR1bGVzLmh0bWwpXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB0byBjaGVjayBmb3Igc2NoZWR1bGUgZm9ybWF0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaXNTY2hlZHVsZSA9ICh2YWx1ZSkgPT4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHZhbHVlLnNjaGVkdWxlcyk7XG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIGpvYiBuYW1lIGZyb20gam9iIGRlZmluaXRpb25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZyB8IE9iamVjdCB8IEZ1bmN0aW9ufSBqb2IgZGVmaW5pdGlvblxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuY29uc3QgZ2V0TmFtZSA9IChqb2IpID0+IHtcbiAgaWYgKGlzU0FOQihqb2IpKSByZXR1cm4gam9iO1xuICBpZiAodHlwZW9mIGpvYiA9PT0gJ29iamVjdCcgJiYgaXNTQU5CKGpvYi5uYW1lKSkgcmV0dXJuIGpvYi5uYW1lO1xuICBpZiAodHlwZW9mIGpvYiA9PT0gJ2Z1bmN0aW9uJyAmJiBpc1NBTkIoam9iLm5hbWUpKSByZXR1cm4gam9iLm5hbWU7XG59O1xuXG4vKipcbiAqIFBhcnNlcyBwcm92aWRlZCB2YWx1ZSBpbnRvIG1pbGxpc2Vjb25kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IF92YWx1ZVxuICovXG5jb25zdCBnZXRIdW1hblRvTXMgPSAoX3ZhbHVlKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gaHVtYW5JbnRlcnZhbChfdmFsdWUpO1xuICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSkgcmV0dXJuIG1zKF92YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogUGFyc2VzIHNjaGVkdWxlIHZhbHVlIGludG8gXCJsYXRlclwiIHNjaGVkdWxlIG9iamVjdCBvciBtaWxsaXNlY29uZHNcbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW4gfCBzdHJpbmcgfCBudW1iZXIgfCBPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyIHwgYm9vbGVhbiB8IE9iamVjdH1cbiAqL1xuY29uc3QgcGFyc2VWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICBpZiAodmFsdWUgPT09IGZhbHNlKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKGlzU2NoZWR1bGUodmFsdWUpKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKGlzU0FOQih2YWx1ZSkpIHtcbiAgICBjb25zdCBzY2hlZHVsZSA9IGxhdGVyLnNjaGVkdWxlKGxhdGVyLnBhcnNlLnRleHQodmFsdWUpKTtcbiAgICBpZiAoc2NoZWR1bGUuaXNWYWxpZCgpKSByZXR1cm4gbGF0ZXIucGFyc2UudGV4dCh2YWx1ZSk7XG4gICAgdmFsdWUgPSBnZXRIdW1hblRvTXModmFsdWUpO1xuICB9XG5cbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUodmFsdWUpIHx8IHZhbHVlIDwgMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVmFsdWUgJHt2YWx1ZX0gbXVzdCBiZSBhIGZpbml0ZSBudW1iZXIgPj0gMCBvciBhIFN0cmluZyBwYXJzZWFibGUgYnkgXFxgbGF0ZXIucGFyc2UudGV4dFxcYCAoc2VlIDxodHRwczovL2JyZWVqcy5naXRodWIuaW8vbGF0ZXIvcGFyc2Vycy5odG1sI3RleHQ+IGZvciBleGFtcGxlcylgXG4gICAgKTtcblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFByb2Nlc3NlcyBqb2Igb2JqZWN0cyBleHRyYWN0aW5nIHRoZWlyIG5hbWVzXG4gKiBDYW4gY29uZGl0aW9uYWx5IHNraXAgcmVjb3JkcyBieSB0aGVpciBpbmRleFxuICpcbiAqIEBwYXJhbSB7YW55W119IGpvYnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBleGNsdWRlSW5kZXhcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX0gam9iIG5hbWVzXG4gKi9cbmNvbnN0IGdldEpvYk5hbWVzID0gKGpvYnMsIGV4Y2x1ZGVJbmRleCkgPT4ge1xuICBjb25zdCBuYW1lcyA9IFtdO1xuXG4gIGZvciAoY29uc3QgW2ksIGpvYl0gb2Ygam9icy5lbnRyaWVzKCkpIHtcbiAgICBpZiAoaSA9PT0gZXhjbHVkZUluZGV4KSBjb250aW51ZTtcblxuICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKGpvYik7XG5cbiAgICBpZiAobmFtZSkgbmFtZXMucHVzaChuYW1lKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbm1vZHVsZS5leHBvcnRzLmlzU2NoZWR1bGUgPSBpc1NjaGVkdWxlO1xubW9kdWxlLmV4cG9ydHMuZ2V0TmFtZSA9IGdldE5hbWU7XG5tb2R1bGUuZXhwb3J0cy5nZXRIdW1hblRvTXMgPSBnZXRIdW1hblRvTXM7XG5tb2R1bGUuZXhwb3J0cy5wYXJzZVZhbHVlID0gcGFyc2VWYWx1ZTtcbm1vZHVsZS5leHBvcnRzLmdldEpvYk5hbWVzID0gZ2V0Sm9iTmFtZXM7XG4iXX0=